openapi: 3.0.4

info:
  title: AlgaShop - Ordering
  description: API for managing orders in the system.
  version: "1.0"
  
servers:    
  - description: Delelopment
    url: http://localhost:8080
  - description: Production
    url: http://api.algashop.com

paths:
  /api/v1/customers:
    post:      
      description: Register a new customer
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        201:
          description: Customer created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          headers:
            Location:            
              schema:
                type: string
              description: Resource address              
              example: http://api.algashop.com/api/v1/customers/6e148bd5-47f6-4022-b9da-07cfaa294f7a
        400:
          description: Bad Request
        409:
          description: Conflict
        422:
          description: Unprocessable Entity  
        500:
          description: Internal Server Error
    get:      
      description: List  customeres
      tags:
        - Customers
      responses:  
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'        
  /api/v1/customers/{customerId}:
    get:            
      parameters:        
        - schema:
            type: string
          name: customerId
          in: path
          required: true
          example: "6e148bd5-47f6-4022-b9da-07cfaa294f7a"
      description: "Get one customer by id"
      tags:
        - Customers
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        404:
          description: Not found
    put:            
      parameters:        
        - schema:
            type: string
          name: customerId
          in: path
          required: true
          example: "6e148bd5-47f6-4022-b9da-07cfaa294f7a"
      description: "Edit customer"
      tags:
        - Customers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerUpdateInput"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        400:
          description: Bad request
        404:
          description: Not found
        409:
          description: Conflict
        422:
          description: Unprocessable Entity
        500:
          description: Internal Server Error
    delete:            
      parameters:        
        - schema:
            type: string
          name: customerId
          in: path
          required: true          
          example: "6e148bd5-47f6-4022-b9da-07cfaa294f7a"
      description: "Delete customer"
      tags:
        - Customers
      responses:
        204:
          description: No content
        404:
          description: Not found  

components:
  schemas:
    Customer:
      type: object
      required:
        - id
        - firstName
        - lastName
        - email
        - document
        - phone
        - birthDate
        - loyaltyPoints
        - registerAt
        - promotionNotifyAllowed
        - archivied
        - addresses
      properties:
        id:
          type: string
          example: "380d7e70-7942-4b8d-a0e9-b93d79aa6745"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"      
        email:
          type: string
          example: "Johndoe@email.com"      
        document:
          type: string
          example: "12345"  
        phone:
          type: string
          example: "1191234564"
        birthDate:
          type: string
          format: date
          example: "1991-07-05"
        loyaltyPoints:
          type: number
          example: 10
        registerAt:
          type: string
          format: date-time
          example: "2024-04-04T12:45Z"  
        archevidAt:
          type: string
          format: date-time
          example: "2024-04-04T12:45Z"
        promotionNotifyAllowed:
          type: boolean
          example: false
        archivied:
          type: boolean
          example: false
        addresses:          
            $ref: '#/components/schemas/Address'
    Address:    
      type: object
      required:
        - street
        - number
        - complement
        - neighborhood
        - city
        - state
        - zipCode
      properties:
        street:
          type: string
          example: "Bourbon Street"
          nullable: false
          x-validation: "notBlank"
        number:
          type: string
          example: "2000"
          nullable: false
          x-validation: "notBlank"
        complement:
          type: string
          example: "apt 122"
          nullable: true          
        neighborhood:
          type: string
          example: "North Ville"
          nullable: false
          x-validation: "notBlank"          
        city:
          type: string
          example: "Yostford"
          nullable: false
          x-validation: "notBlank"
        state:
          type: string
          example: "South Line"
          nullable: false
          x-validation: "notBlank"
        zipCode:
          type: string
          example: "12321"
          nullable: false  
          x-validation: "notBlank"
    CustomerInput:
      type: object      
      required:
        - firstName
        - lastName
        - email
        - document
        - phone
        - birthDate
        - promotionNotifyAllowed
        - addresses
      properties:        
        firstName:
          type: string
          example: "John"
          nullable: false
          x-validation: "notBlank"
        lastName:
          type: string
          example: "Doe"      
          nullable: false
          x-validation: "notBlank"
        email:
          type: string
          example: "Johndoe@email.com"      
          nullable: false
          x-validation: ["email","notBlank"]     
        document:
          type: string
          example: "12345"  
          nullable: false
          x-validation: "notBlank"
        phone:
          type: string
          example: "1191234564"
          nullable: false
          x-validation: "notBlank"
        birthDate:
          type: string
          format: date
          example: "1991-07-05"    
          nullable: false
          x-validation: pastDate            
        promotionNotifyAllowed:
          type: boolean
          example: false        
          nullable: false
        addresses:          
            $ref: '#/components/schemas/Address'
    CustomerUpdateInput:
      type: object
      required:
        - firstName
        - lastName
        - phone
        - promotionNotifyAllowed
        - addresses
      properties:        
        firstName:
          type: string
          example: "John"
          nullable: false     
          x-validation: "notBlank"
        lastName:
          type: string
          example: "Doe" 
          nullable: false     
          x-validation: "notBlank"
        phone:
          type: string
          example: "1191234564"        
          nullable: false
          x-validation: "notBlank"
        promotionNotifyAllowed:
          type: boolean
          example: false 
          nullable: false       
        addresses:          
            $ref: '#/components/schemas/Address'
      